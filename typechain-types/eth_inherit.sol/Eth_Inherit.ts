/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Eth_Inherit {
  export type ParentStruct = {
    _address: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    surname: PromiseOrValue<string>;
    childrenAddresses: PromiseOrValue<string>[];
  };

  export type ParentStructOutput = [string, string, string, string[]] & {
    _address: string;
    name: string;
    surname: string;
    childrenAddresses: string[];
  };

  export type ChildStruct = {
    _address: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    surname: PromiseOrValue<string>;
    releaseDate: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    parentAddress: PromiseOrValue<string>;
  };

  export type ChildStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    _address: string;
    name: string;
    surname: string;
    releaseDate: BigNumber;
    balance: BigNumber;
    parentAddress: string;
  };
}

export interface Eth_InheritInterface extends utils.Interface {
  functions: {
    "addChild(address,string,string,uint256)": FunctionFragment;
    "addParent(address,string,string)": FunctionFragment;
    "cancelChild(address)": FunctionFragment;
    "changeReleaseDate(address,uint256)": FunctionFragment;
    "childWithdraw()": FunctionFragment;
    "getAllParents()": FunctionFragment;
    "getChild()": FunctionFragment;
    "getChildren(address)": FunctionFragment;
    "getChildrenAsParent()": FunctionFragment;
    "getParent()": FunctionFragment;
    "getRole(address)": FunctionFragment;
    "parentDeposit(address)": FunctionFragment;
    "parentWithdraw(address,uint256)": FunctionFragment;
    "seeContractBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addChild"
      | "addParent"
      | "cancelChild"
      | "changeReleaseDate"
      | "childWithdraw"
      | "getAllParents"
      | "getChild"
      | "getChildren"
      | "getChildrenAsParent"
      | "getParent"
      | "getRole"
      | "parentDeposit"
      | "parentWithdraw"
      | "seeContractBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addChild",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addParent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelChild",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeReleaseDate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "childWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllParents",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getChild", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getChildren",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChildrenAsParent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getParent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "parentDeposit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "parentWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "seeContractBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addChild", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addParent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeReleaseDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllParents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChildrenAsParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parentWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seeContractBalance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Eth_Inherit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Eth_InheritInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addChild(
      childAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      releaseDate: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addParent(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelChild(
      childAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeReleaseDate(
      childAddress: PromiseOrValue<string>,
      _releaseDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    childWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllParents(
      overrides?: CallOverrides
    ): Promise<
      [Eth_Inherit.ParentStructOutput[]] & {
        result: Eth_Inherit.ParentStructOutput[];
      }
    >;

    getChild(
      overrides?: CallOverrides
    ): Promise<
      [Eth_Inherit.ChildStructOutput] & {
        result: Eth_Inherit.ChildStructOutput;
      }
    >;

    getChildren(
      parentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [Eth_Inherit.ChildStructOutput[]] & {
        result: Eth_Inherit.ChildStructOutput[];
      }
    >;

    getChildrenAsParent(
      overrides?: CallOverrides
    ): Promise<
      [Eth_Inherit.ChildStructOutput[]] & {
        result: Eth_Inherit.ChildStructOutput[];
      }
    >;

    getParent(
      overrides?: CallOverrides
    ): Promise<
      [Eth_Inherit.ParentStructOutput] & {
        result: Eth_Inherit.ParentStructOutput;
      }
    >;

    getRole(
      roleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    parentDeposit(
      childAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    parentWithdraw(
      childAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seeContractBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { contractBalance: BigNumber }>;
  };

  addChild(
    childAddress: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    surname: PromiseOrValue<string>,
    releaseDate: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addParent(
    _address: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    surname: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelChild(
    childAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeReleaseDate(
    childAddress: PromiseOrValue<string>,
    _releaseDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  childWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllParents(
    overrides?: CallOverrides
  ): Promise<Eth_Inherit.ParentStructOutput[]>;

  getChild(overrides?: CallOverrides): Promise<Eth_Inherit.ChildStructOutput>;

  getChildren(
    parentAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Eth_Inherit.ChildStructOutput[]>;

  getChildrenAsParent(
    overrides?: CallOverrides
  ): Promise<Eth_Inherit.ChildStructOutput[]>;

  getParent(overrides?: CallOverrides): Promise<Eth_Inherit.ParentStructOutput>;

  getRole(
    roleAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  parentDeposit(
    childAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  parentWithdraw(
    childAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seeContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addChild(
      childAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      releaseDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addParent(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelChild(
      childAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeReleaseDate(
      childAddress: PromiseOrValue<string>,
      _releaseDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    childWithdraw(overrides?: CallOverrides): Promise<void>;

    getAllParents(
      overrides?: CallOverrides
    ): Promise<Eth_Inherit.ParentStructOutput[]>;

    getChild(overrides?: CallOverrides): Promise<Eth_Inherit.ChildStructOutput>;

    getChildren(
      parentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Eth_Inherit.ChildStructOutput[]>;

    getChildrenAsParent(
      overrides?: CallOverrides
    ): Promise<Eth_Inherit.ChildStructOutput[]>;

    getParent(
      overrides?: CallOverrides
    ): Promise<Eth_Inherit.ParentStructOutput>;

    getRole(
      roleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    parentDeposit(
      childAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    parentWithdraw(
      childAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    seeContractBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addChild(
      childAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      releaseDate: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addParent(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelChild(
      childAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeReleaseDate(
      childAddress: PromiseOrValue<string>,
      _releaseDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    childWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllParents(overrides?: CallOverrides): Promise<BigNumber>;

    getChild(overrides?: CallOverrides): Promise<BigNumber>;

    getChildren(
      parentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChildrenAsParent(overrides?: CallOverrides): Promise<BigNumber>;

    getParent(overrides?: CallOverrides): Promise<BigNumber>;

    getRole(
      roleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parentDeposit(
      childAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    parentWithdraw(
      childAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seeContractBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addChild(
      childAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      releaseDate: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addParent(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelChild(
      childAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeReleaseDate(
      childAddress: PromiseOrValue<string>,
      _releaseDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    childWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllParents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChild(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChildren(
      parentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChildrenAsParent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRole(
      roleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parentDeposit(
      childAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    parentWithdraw(
      childAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seeContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
