/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Admin_and_Parent {
  export type ParentStruct = {
    _address: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    surname: PromiseOrValue<string>;
    children: PromiseOrValue<string>[];
  };

  export type ParentStructOutput = [string, string, string, string[]] & {
    _address: string;
    name: string;
    surname: string;
    children: string[];
  };
}

export interface Admin_and_ParentInterface extends utils.Interface {
  functions: {
    "addParent(address,string,string)": FunctionFragment;
    "getParent()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addParent" | "getParent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addParent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getParent", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addParent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getParent", data: BytesLike): Result;

  events: {};
}

export interface Admin_and_Parent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Admin_and_ParentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addParent(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getParent(
      overrides?: CallOverrides
    ): Promise<
      [Admin_and_Parent.ParentStructOutput] & {
        result: Admin_and_Parent.ParentStructOutput;
      }
    >;
  };

  addParent(
    _address: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    surname: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getParent(
    overrides?: CallOverrides
  ): Promise<Admin_and_Parent.ParentStructOutput>;

  callStatic: {
    addParent(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getParent(
      overrides?: CallOverrides
    ): Promise<Admin_and_Parent.ParentStructOutput>;
  };

  filters: {};

  estimateGas: {
    addParent(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getParent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addParent(
      _address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      surname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getParent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
